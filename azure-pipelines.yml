# Again&Co E-commerce PHP Testing Pipeline
# Test and package your PHP project with comprehensive testing
# Automated testing for all features: Authentication, Cart, Checkout, Admin, etc.

trigger:
  branches:
    include:
      - main
      - develop

pr:
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

variables:
  phpVersion: '8.2'
  junitFile: 'test-results.xml'

steps:
- checkout: self

# Install PHP and required extensions
- script: |
    sudo apt-get update
    sudo apt-get install -y software-properties-common
    sudo add-apt-repository ppa:ondrej/php -y
    sudo apt-get update
    sudo apt-get install -y php8.2 php8.2-cli php8.2-xml php8.2-mbstring php8.2-curl php8.2-zip php8.2-sqlite3 php8.2-mysql php8.2-xdebug
    php -v
    php -m | grep -E "(xml|mbstring|curl|zip)"
  displayName: 'Install PHP + extensions'

# Install Composer
- script: |
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    composer --version
  displayName: 'Install Composer'

# Install project dependencies
- script: composer install --no-interaction --no-progress
  displayName: 'Composer install dependencies'

# Validate PHP syntax in test files
- script: |
    echo "Checking PHP syntax in test files..."
    for file in tests/*.php; do
      if [ -f "$file" ]; then
        echo "Checking $file..."
        php -l "$file" || echo "Syntax error in $file"
      fi
    done
    echo "PHP syntax validation completed"
  displayName: 'Validate PHP Syntax'

# Test PHPUnit setup
- script: |
    echo "=== PHPUnit Setup Verification ==="
    
    # Test bootstrap file
    echo "Testing bootstrap file..."
    php tests/bootstrap.php && echo "✓ Bootstrap loaded successfully" || echo "✗ Bootstrap failed"
    
    # Verify PHPUnit installation
    echo "Verifying PHPUnit installation..."
    vendor/bin/phpunit --version && echo "✓ PHPUnit available" || echo "✗ PHPUnit not available"
    
    # Test discovery
    echo "Testing test discovery..."
    vendor/bin/phpunit --list-tests && echo "✓ Tests discovered" || echo "✗ Test discovery failed"
    
    # Try running just the basic test
    echo "Testing basic test execution..."
    vendor/bin/phpunit tests/BasicTest.php --verbose && echo "✓ Basic test passed" || echo "✗ Basic test failed"
    
  displayName: 'Verify PHPUnit Setup'

# Run comprehensive PHPUnit test suite
- script: |
    echo "=== PHPUnit Test Execution ==="
    echo "Current directory: $(pwd)"
    echo "PHP version: $(php --version)"
    
    # Check if vendor/bin/phpunit exists
    if [ -f "vendor/bin/phpunit" ]; then
      echo "✓ PHPUnit found at vendor/bin/phpunit"
      vendor/bin/phpunit --version
    else
      echo "✗ PHPUnit not found in vendor/bin/"
      ls -la vendor/bin/ || echo "vendor/bin directory not found"
      exit 1
    fi
    
    # Ensure we have a clean environment
    rm -f junit.xml
    rm -f $(junitFile)
    
    # Show test files that will be executed
    echo "Test files to be executed:"
    find tests -name "*.php" -type f | head -10
    
    echo "=== Starting PHPUnit Execution ==="
    # Run PHPUnit with error handling
    vendor/bin/phpunit --configuration phpunit.xml --log-junit $(junitFile) --testdox --verbose || {
        echo "PHPUnit execution completed with exit code $?"
        if [ ! -f "$(junitFile)" ]; then
          echo "Creating fallback JUnit XML file..."
          printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>' > $(junitFile)
          printf '%s\n' '<testsuites name="Again&Co Tests" tests="1" failures="1">' >> $(junitFile)
          printf '%s\n' '  <testsuite name="Execution" tests="1" failures="1">' >> $(junitFile)
          printf '%s\n' '    <testcase name="PHPUnit" classname="Pipeline">' >> $(junitFile)
          printf '%s\n' '      <failure message="Execution failed">Check logs</failure>' >> $(junitFile)
          printf '%s\n' '    </testcase>' >> $(junitFile)
          printf '%s\n' '  </testsuite>' >> $(junitFile)
          printf '%s\n' '</testsuites>' >> $(junitFile)
        fi
      }
    
    echo "=== PHPUnit Execution Completed ==="
    if [ -f "$(junitFile)" ]; then
      echo "✓ JUnit file created successfully"
      echo "File size: $(stat -c%s $(junitFile) 2>/dev/null || echo 'unknown') bytes"
    else
      echo "✗ JUnit file not found at $(junitFile)"
    fi
  displayName: 'Run PHPUnit Test Suite'

# Show test summary
- script: |
    if [ -f "$(junitFile)" ]; then
      echo "=== TEST RESULTS SUMMARY ==="
      echo "JUnit XML file generated successfully"
      echo "File size: $(stat -f%z $(junitFile) 2>/dev/null || stat -c%s $(junitFile) 2>/dev/null || echo 'unknown') bytes"
      echo "File contents preview:"
      head -20 $(junitFile) || echo "Could not read file"
      echo "Check the Tests tab for detailed results"
    else
      echo "Warning: JUnit XML file not found at $(junitFile)"
      echo "Contents of current directory:"
      ls -la
      echo "Contents of test-results directory (if exists):"
      ls -la test-results/ || echo "test-results directory not found"
    fi
  displayName: 'Display Test Summary'
  condition: always()

# Publish JUnit results to Azure Pipelines Tests tab
- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(junitFile)'
    failTaskOnFailedTests: false
    testRunTitle: 'Again&Co E-commerce Tests'
    publishRunAttachments: true

# Archive test artifacts (only if file exists)
- script: |
    if [ -f "$(junitFile)" ]; then
      echo "JUnit file exists, preparing for archive"
      cp $(junitFile) $(Build.SourcesDirectory)/test-results/
    else
      echo "JUnit file not found, creating empty test results"
      mkdir -p $(Build.SourcesDirectory)/test-results
      echo "No test results generated" > $(Build.SourcesDirectory)/test-results/error.txt
    fi
  displayName: 'Prepare test artifacts'
  condition: always()

- task: PublishBuildArtifacts@1
  displayName: 'Archive test results'
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/test-results'
    ArtifactName: 'test-results'
    publishLocation: 'Container'
